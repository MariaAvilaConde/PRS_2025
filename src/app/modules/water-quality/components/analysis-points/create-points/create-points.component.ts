import { Component, Input, Output, EventEmitter, SimpleChanges, OnInit, Inject } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { WaterQualityApi } from '../../../services/water-quality-api';
import { TestingPoints } from '../../../models/quality-test.model';
import { Observable } from 'rxjs';

interface Zone {
  id: string;
  name: string;
  status: string;
}

@Component({
  selector: 'app-create-points',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './create-points.component.html',
  styleUrls: ['./create-points.component.css']
})
export class CreatePointsComponent implements OnInit {
  @Input() isOpen: boolean = false;
  @Input() organizationId: string | null = null;
  @Output() close = new EventEmitter<void>();
  @Output() pointCreated = new EventEmitter<TestingPoints>();

  isLoading: boolean = false;
  isSaving: boolean = false;

  createForm: FormGroup;
  validationErrors: { [key: string]: string } = {};

  availableZones: Zone[] = [
    { id: '6896b4b0f3e398570ffd99d6', name: 'Zona Demo', status: 'ACTIVE' }
  ];

  pointTypes = [
    { value: 'DOMICILIO', label: 'DOMICILIO' },
    { value: 'RESERVOIR', label: 'RESERVORIO' },
    { value: 'RED_DISTRIBUCION', label: 'RED DISTRIBUCIÓN' }
  ];

  constructor(
    private readonly fb: FormBuilder,
    private readonly waterQualityApi: WaterQualityApi
  ) {
    this.createForm = this.fb.group({
      code: ['', Validators.required],
      name: ['', Validators.required],
      type: ['', Validators.required],
      zoneId: ['', Validators.required],
      description: [''],
      status: ['Activo', Validators.required]
    });

    this.createForm.valueChanges.subscribe(() => this.validateFormRealTime());
  }

  ngOnInit(): void {
    // Load zones from API if needed
  }

  ngOnChanges(changes: SimpleChanges): void {
    if ((changes['isOpen'] || changes['organizationId']) && this.isOpen) {
      this.resetForm();
    }
  }

  validateFormRealTime(): void {
    this.validationErrors = {};
    const form = this.createForm;

    if (!form.get('code')?.value) this.validationErrors['code'] = 'El código es obligatorio';
    if (!form.get('name')?.value) this.validationErrors['name'] = 'El nombre es obligatorio';
    if (!form.get('type')?.value) this.validationErrors['type'] = 'El tipo es obligatorio';
    if (!form.get('zoneId')?.value) this.validationErrors['zoneId'] = 'La zona es obligatoria';
  }

  onCreatePoint(): void {
    this.validateFormRealTime();
    if (Object.keys(this.validationErrors).length > 0) {
      alert('Corrige los campos inválidos');
      return;
    }

    if (!this.organizationId) {
      alert('No se ha especificado la organización');
      return;
    }

    this.isSaving = true;

    // Create the testing point object
    const testingPoint: TestingPoints = {
      id: '', // Will be generated by the backend
      organizationId: this.organizationId,
      pointCode: this.createForm.value.code,
      pointName: this.createForm.value.name,
      pointType: this.createForm.value.type,
      zoneId: this.createForm.value.zoneId,
      locationDescription: this.createForm.value.description || '',
      street: '',
      coordinates: { latitude: 0, longitude: 0 }, // Default coordinates
      status: this.createForm.value.status === 'Activo' ? 'ACTIVE' : 'INACTIVE',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // Call the API to create the testing point
    this.waterQualityApi.createTestingPoint(testingPoint).subscribe({
      next: (response: any) => {
        if (response.success && response.data) {
          this.pointCreated.emit(response.data);
          alert('Punto de prueba creado correctamente');
          this.onClose();
        } else {
          alert('Error al crear el punto de prueba');
        }
        this.isSaving = false;
      },
      error: (error: any) => {
        console.error('Error creating testing point:', error);
        alert('Error al crear el punto de prueba');
        this.isSaving = false;
      }
    });
  }

  onClose(): void {
    this.resetForm();
    this.close.emit();
  }

  private resetForm(): void {
    this.createForm.reset({ status: 'Activo' });
    this.validationErrors = {};
  }
}